{
  // Place your uah workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // TM_FILENAME_BASE, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('TM_FILENAME_BASE');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Ts class component": {
    "scope": "typescriptreact",
    "prefix": "tscomp", // typescript component
    "body": [
      "interface Props {}",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<Props> = ({}) => {",
      "\treturn <div>${TM_FILENAME_BASE}</div>;",
      "};"
    ]
  },
  "Redux async value": {
    "scope": "typescript",
    "prefix": "useasync",
    "body": [
      "export const useEnsure$1AsyncValue = () => {",
      "\tconst dispatch = usePlutoDispatch();",
      "\tconst status = usePlutoSelector(state => state.$2);",
      "",
      "\tuseEffect(() => {",
      "\t\tif (status === 'unloaded') {",
      "\t\t\tdispatch($3);",
      "\t\t}",
      "\t}, [status, dispatch]);",
      "};"
    ]
  },
  "New trigger": {
    "scope": "typescriptreact",
    "prefix": "trigger",
    "body": [
      "import { validateObject } from \"../../../util/validators\";",
      "import {",
      "\tParthenonTrigger,",
      "\tTriggerBuilder,",
      "\tTriggerDiscoveryInfo,",
      "} from \"../parthenonVisualEditorTypes\";",
      "",
      "export interface Parthenon${TM_FILENAME_BASE} extends ParthenonTrigger {",
      "\ttype: \"${TM_FILENAME_BASE}\";",
      "}",
      "",
      "export const discoveryInfo${TM_FILENAME_BASE}: TriggerDiscoveryInfo<Parthenon${TM_FILENAME_BASE}> = {",
      "\ttype: \"${TM_FILENAME_BASE}\",",
      "\tname: \"\",",
      "\ttags: [],",
      "\tdescription: \"\",",
      "};",
      "",
      "export const is${TM_FILENAME_BASE} = (",
      "\ttrigger: ParthenonTrigger",
      "): trigger is Parthenon${TM_FILENAME_BASE} => trigger.type === \"${TM_FILENAME_BASE}\";",
      "",
      "export const validate${TM_FILENAME_BASE} = (trigger: Parthenon${TM_FILENAME_BASE}) =>",
      "\tvalidateObject(trigger, {});",
      "",
      "export const ${TM_FILENAME_BASE}: TriggerBuilder<Parthenon${TM_FILENAME_BASE}> = ({}) => {",
      "\treturn <></>;",
      "};"
    ]
  },
  "New clause": {
    "scope": "typescriptreact",
    "prefix": "clause",
    "body": [
      "import { validateObject } from \"../../../util/validators\";",
      "import {",
      "  ClauseBuilder,",
      "  ClauseDiscoveryInfo,",
      "  ParthenonClause,",
      "} from \"../parthenonVisualEditorTypes\";",
      "",
      "export interface Parthenon${TM_FILENAME_BASE} extends ParthenonClause {",
      "  type: \"${TM_FILENAME_BASE}\";",
      "}",
      "",
      "export const is${TM_FILENAME_BASE} = (",
      "  clause: ParthenonClause",
      "): clause is Parthenon${TM_FILENAME_BASE} => clause.type === \"${TM_FILENAME_BASE}\";",
      "",
      "export const discoveryInfo${TM_FILENAME_BASE}: ClauseDiscoveryInfo<Parthenon${TM_FILENAME_BASE}> =",
      "  {",
      "    name: \"${TM_FILENAME_BASE}\",",
      "    description: '',",
      "    type: \"${TM_FILENAME_BASE}\",",
      "    icon: null,",
      "  };",
      "",
      "export const is${TM_FILENAME_BASE}Valid = (clause: Parthenon${TM_FILENAME_BASE}) =>",
      "  validateObject(clause, {",
      "  });",
      "",
      "export const ${TM_FILENAME_BASE}: ClauseBuilder<Parthenon${TM_FILENAME_BASE}> = ({",
      "  update,",
      "  clause,",
      "  isCompleteAndValid,",
      "  hasPreviousClause,",
      "}) => {",
      "  return (",
      "    <>",
      "    </>",
      "  );",
      "};"
    ]
  }
}
